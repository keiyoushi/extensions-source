package eu.kanade.tachiyomi.multisrc.machinetranslations

import eu.kanade.tachiyomi.source.model.Filter

class SelectionList(displayName: String, private val vals: List<Option>, state: Int = 0) :
    Filter.Select<String>(displayName, vals.map { it.name }.toTypedArray(), state) {
    fun selected() = vals[state]
}

data class Option(val name: String = "", val value: String = "", val query: String = "")

class GenreList(title: String, genres: List<Genre>) :
    Filter.Group<GenreCheckBox>(title, genres.map { GenreCheckBox(it.name, it.id) })

class GenreCheckBox(name: String, val id: String = name) : Filter.CheckBox(name)

class Genre(val name: String, val id: String = name)

val genreList: List<Genre> = listOf(
    Genre("Action"),
    Genre("Adult"),
    Genre("Adventure"),
    Genre("Comedy"),
    Genre("Drama"),
    Genre("Ecchi"),
    Genre("Fantasy"),
    Genre("Gender Bender"),
    Genre("Harem"),
    Genre("Historical"),
    Genre("Horror"),
    Genre("Josei"),
    Genre("Lolicon"),
    Genre("Martial Arts"),
    Genre("Mature"),
    Genre("Mecha"),
    Genre("Mystery"),
    Genre("Psychological"),
    Genre("Romance"),
    Genre("School Life"),
    Genre("Sci-fi"),
    Genre("Seinen"),
    Genre("Shoujo"),
    Genre("Shoujo Ai"),
    Genre("Shounen"),
    Genre("Shounen Ai"),
    Genre("Slice of Life"),
    Genre("Smut"),
    Genre("Sports"),
    Genre("Supernatural"),
    Genre("Tragedy"),
    Genre("Yaoi"),
    Genre("Yuri"),
)

val typeList = listOf(
    Option("All Types", ""),
    Option("Manhua", "manhua"),
    Option("Manhwa", "manhwa"),
)

val yearList = listOf(
    Option("All Years", ""),
    Option("1985", "1985"),
    Option("1998", "1998"),
    Option("2001", "2001"),
    Option("2006", "2006"),
    Option("2007", "2007"),
    Option("2009", "2009"),
    Option("2010", "2010"),
    Option("2011", "2011"),
    Option("2012", "2012"),
    Option("2013", "2013"),
    Option("2014", "2014"),
    Option("2015", "2015"),
    Option("2016", "2016"),
    Option("2017", "2017"),
    Option("2018", "2018"),
    Option("2019", "2019"),
    Option("2020", "2020"),
    Option("2021", "2021"),
    Option("2022", "2022"),
)

val statusList = listOf(
    Option("All Status", ""),
    Option("Ongoing", "ongoing"),
    Option("Complete", "complete"),
    Option("Hiatus", "hiatus"),
    Option("Cancelled", "cancelled"),
    Option("Discontinued", "discontinued"),
)

val sortByList = listOf(
    Option("Relevance", ""),
    Option("Most Views", "views"),
    Option("Most Recent", "recent"),
).map { it.copy(query = "sort_by") }

val tagList = listOf(
    Genre("15th Century"),
    Genre("1910s"),
    Genre("1920s"),
    Genre("1960s"),
    Genre("1990s"),
    Genre("19th Century"),
    Genre("20th Century"),
    Genre("21st Century"),
    Genre("Abandoned"),
    Genre("Abuse"),
    Genre("Adopted Child"),
    Genre("Age Regression"),
    Genre("Age Difference"),
    Genre("Alien"),
    Genre("Alternate History"),
    Genre("Alternate Universe"),
    Genre("Amnesia"),
    Genre("Ancient China"),
    Genre("Android"),
    Genre("Animal Characteristics"),
    Genre("Anti-Hero"),
    Genre("Apocalypse"),
    Genre("Arranged Marriage"),
    Genre("Artificial Intelligence"),
    Genre("Artists"),
    Genre("Assassins"),
    Genre("Athletes"),
    Genre("Based on a True Story"),
    Genre("Betrayal"),
    Genre("Biker Gangs"),
    Genre("Bishoujo"),
    Genre("Bishounen"),
    Genre("Body Swap"),
    Genre("Bullying"),
    Genre("Business"),
    Genre("Campus Life"),
    Genre("Cannibalism"),
    Genre("Card Games"),
    Genre("Childhood Friends"),
    Genre("Childcare"),
    Genre("Chivalry"),
    Genre("College"),
    Genre("Comedy of Errors"),
    Genre("Coming of Age"),
    Genre("Conspiracy"),
    Genre("Contract Marriage"),
    Genre("Cooking"),
    Genre("Cosplay"),
    Genre("Crime"),
    Genre("Cross-dressing"),
    Genre("Cultivation"),
    Genre("Curses"),
    Genre("Cyberpunk"),
    Genre("Dancers"),
    Genre("Death Game"),
    Genre("Demons"),
    Genre("Detective"),
    Genre("Disability"),
    Genre("Disaster"),
    Genre("Discrimination"),
    Genre("Doctors"),
    Genre("Domestic Abuse"),
    Genre("Dragons"),
    Genre("Dungeons"),
    Genre("Dystopia"),
    Genre("Elf"),
    Genre("Emperor"),
    Genre("Empress"),
    Genre("Envy"),
    Genre("Epic"),
    Genre("Espionage"),
    Genre("Experiment"),
    Genre("Fairies"),
    Genre("Family"),
    Genre("Fantasy World"),
    Genre("Fashion"),
    Genre("Female Protagonist"),
    Genre("Female Warrior"),
    Genre("Fencing"),
    Genre("Fetish"),
    Genre("First Love"),
    Genre("Food"),
    Genre("Forced Marriage"),
    Genre("Friendship"),
    Genre("Full Color"),
    Genre("Futuristic"),
    Genre("Game"),
    Genre("Gangs"),
    Genre("Genderbending"),
    Genre("Genie"),
    Genre("Ghost"),
    Genre("Gods"),
    Genre("Golem"),
    Genre("Gory"),
    Genre("Guilds"),
    Genre("Harem"),
    Genre("Healers"),
    Genre("Historical"),
    Genre("Homunculus"),
    Genre("Human Experiment"),
    Genre("Hunters"),
    Genre("Idol"),
    Genre("Incest"),
    Genre("Infidelity"),
    Genre("Inheritance"),
    Genre("Inner Demons"),
    Genre("Interspecies Romance"),
    Genre("Interview"),
    Genre("Isekai"),
    Genre("Island"),
    Genre("Jealousy"),
    Genre("Josei"),
    Genre("Journey"),
    Genre("Knights"),
    Genre("Labyrinth"),
    Genre("Law"),
    Genre("Legend"),
    Genre("Loli"),
    Genre("Love Triangle"),
    Genre("Magic"),
    Genre("Magical Girl"),
    Genre("Maid"),
    Genre("Male Protagonist"),
    Genre("Martial Arts"),
    Genre("Mature"),
    Genre("Mecha"),
    Genre("Medical"),
    Genre("Medieval"),
    Genre("Memory Loss"),
    Genre("Mermaid"),
    Genre("Military"),
    Genre("Mind Control"),
    Genre("Monster"),
    Genre("Monster Girl"),
    Genre("Monsters"),
    Genre("Mythology"),
    Genre("Necromancy"),
    Genre("Netorare"),
    Genre("Netorase"),
    Genre("Ninja"),
    Genre("Nudity"),
    Genre("Office"),
    Genre("Older Sister"),
    Genre("Older Woman"),
    Genre("Onmyouji"),
    Genre("Orphan"),
    Genre("Otome Game"),
    Genre("Parallel World"),
    Genre("Parody"),
    Genre("Past Life"),
    Genre("Pet"),
    Genre("Philosophical"),
    Genre("Photography"),
    Genre("Pirates"),
    Genre("Police"),
    Genre("Politics"),
    Genre("Post-Apocalyptic"),
    Genre("Power Couple"),
    Genre("Pregnancy"),
    Genre("Priest"),
    Genre("Prince"),
    Genre("Princess"),
    Genre("Prison"),
    Genre("Prostitution"),
    Genre("Psychic"),
    Genre("Psychopath"),
    Genre("Queen"),
    Genre("Racism"),
    Genre("Reincarnation"),
    Genre("Reluctant Hero"),
    Genre("Revenge"),
    Genre("Reverse Harem"),
    Genre("Robot"),
    Genre("Royalty"),
    Genre("Rural"),
    Genre("Samurai"),
    Genre("School"),
    Genre("Sci-Fi"),
    Genre("Secret Identity"),
    Genre("Self-discovery"),
    Genre("Self-harm"),
    Genre("Seinen"),
    Genre("Sexual Abuse"),
    Genre("Shaman"),
    Genre("Shapeshifter"),
    Genre("Shoujo"),
    Genre("Shounen"),
    Genre("Siblings"),
    Genre("Slice of Life"),
    Genre("Slime"),
    Genre("Space"),
    Genre("Sports"),
    Genre("Steampunk"),
    Genre("Step-siblings"),
    Genre("Stoic"),
    Genre("Storytelling"),
    Genre("Strong Female Lead"),
    Genre("Strong Male Lead"),
    Genre("Supernatural"),
    Genre("Survival"),
    Genre("Sword and Sorcery"),
    Genre("Teacher"),
    Genre("Tentacles"),
    Genre("Threesome"),
    Genre("Time Travel"),
    Genre("Tomboy"),
    Genre("Torture"),
    Genre("Traditional"),
    Genre("Tragic"),
    Genre("Transgender"),
    Genre("Trap"),
    Genre("Travelers"),
    Genre("Ugly to Beautiful"),
    Genre("Underworld"),
    Genre("Unrequited Love"),
    Genre("Urban"),
    Genre("Vampire"),
    Genre("Villain"),
    Genre("Virtual Reality"),
    Genre("War"),
    Genre("Werewolf"),
    Genre("Witches"),
    Genre("Wizard"),
    Genre("Yandere"),
    Genre("Younger Sister"),
    Genre("Younger Woman"),
    Genre("Zombie"),
)


